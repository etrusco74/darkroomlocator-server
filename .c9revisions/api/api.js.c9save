{"ts":1378733178733,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var UserProvider = require('../providers/providers').UserProvider;\nvar ActivityProvider = require('../providers/providers').ActivityProvider;\nvar TrainingProvider = require('../providers/providers').TrainingProvider;\nvar Mail = require('../providers/mail').Mail;\n\nvar utils = require('../config/utils');\nvar time = require('time')(Date);\n\nvar userProvider = new UserProvider();\nvar typeProvider = new TypeProvider();\nvar reportProvider = new ReportProvider();\nvar mail = new Mail();\n\n\n/*************************************** USER API ***************************************/\n\n/********** GET method **********/\n\n/** findUsers - private **/\nvar findUsers = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n    \n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findUsers - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findUsers';\n    authObj.verb = 'GET';\n    \n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else    {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                userProvider.findAll(function(err, users){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        if (users.length != 0) {\n                            res.send(JSON.stringify(users));\n                            console.log('Users: ' + JSON.stringify(users));\n                            //FIXME - togliere, esempio per Time Zone\n                            /*\n                            var data_iscrizione = new time.Date(users[0].data);\n                            console.log('Server TimeZone' + data_iscrizione.getTimezone());\n                            data_iscrizione.setTimezone('Europe/Rome');\n                            console.log('Data in current TimeZone: ' + data_iscrizione.toString());\n                            */\n                        }\n                        else {\n                            jsonObj.success = false;\n                            jsonObj.error = 'No users found';\n                            res.send(jsonObj);\n                            console.log(jsonObj.error);\n                        }\n                    }\n                })\n                \n            }\n        })\n    }\n};\n\n/** findUserById - private **/\nvar findUserById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findUserById - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findUserById';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n   \n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else    {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                userProvider.findById(authObj.params.id, function(err, user){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        if (user) {\n                            res.send(JSON.stringify(user));\n                            console.log('Users: ' + JSON.stringify(user));\n                        }\n                        else {\n                            jsonObj.success = false;\n                            jsonObj.error = 'No user found';\n                            res.send(jsonObj);\n                            console.log(jsonObj.error);\n                        }\n                    }\n                })\n            }\n        })\n    }\n};\n\n/** findUserByUsername - private **/\nvar findUserByUsername = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findUserByUsername - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findUserByUsername';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n   \n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else    {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                userProvider.findByUsername(authObj.params.username, function(err, user){\n                    if (err) {\n                        authObj.isAuth = true;\n                        console.log('authObj: ' + JSON.stringify(authObj));\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        if (user) {\n                            res.send(JSON.stringify(user));\n                            console.log('Users: ' + JSON.stringify(user));\n                        }\n                        else {\n                            jsonObj.success = false;\n                            jsonObj.error = 'No user found';\n                            res.send(jsonObj);\n                            console.log(jsonObj.error);\n                        }\n                    }\n                })\n            }\n        })\n    }\n};\n\n/********** POST method **********/\n\n/** login - public **/\nvar login = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n        \n    var jsonObj = { };\n    var authObj = { };\n    var userReq = req.body;\n\n    console.log('------------------- POST - api login - public  --------------------- ');\n    \n    authObj.lang = req.headers.lang;\n    \n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'login';\n    authObj.verb = 'POST';\n    console.log('request body: ' + JSON.stringify(userReq));\n    console.log('authObj: ' + JSON.stringify(authObj));\n    \n    var content_type = req.get('content-type');    \n    if (content_type.indexOf(\"application/json\") === -1)   {\n        jsonObj.success = false;\n        jsonObj.error = 'Content Type must be application/json';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        return;\n    }\n    if (typeof userReq.username === 'undefined')       {\n        jsonObj.success = false;\n        jsonObj.error = 'username required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        return;\n    }\n    if (typeof userReq.password === 'undefined')       {\n        jsonObj.success = false;\n        jsonObj.error = 'password required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        return;\n    }\n    userProvider.login(userReq, authObj.ipAddress, function(err, userRes){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (userRes != null) {\n                jsonObj.success = true;\n                jsonObj.user    = userRes;\n                res.send(jsonObj);\n                console.log('Login ok');\n                console.log('User: ' + JSON.stringify(userRes));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = \"Login Failed\";\n                res.send(jsonObj);\n                console.log('Login Failed');\n            }\n        }\n    })\n};\n\n/** saveUser - public **/\nvar saveUser = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n    var userReq = req.body;\n\n    console.log('------------------- POST - api saveUser -public --------------------- ');\n\n    authObj.lang = req.headers.lang;\n    \n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'saveUser';\n    authObj.verb = 'POST';\n    console.log('request body: ' + JSON.stringify(userReq));\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    var content_type = req.get('content-type');    \n    if (content_type.indexOf(\"application/json\") === -1)   {\n        jsonObj.success = false;\n        jsonObj.error = 'Content Type must be application/json';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        return;\n    }\n    userProvider.save(userReq, authObj.ipAddress, function(err, userRes){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            jsonObj.success = true;\n            jsonObj.user    = userRes;\n            res.send(jsonObj);\n            console.log('Registration ok');\n            console.log('User: ' + JSON.stringify(userRes));\n                         \n            /** send activate mail **/            \n            mail.activate(userRes, authObj.lang, function(err, res){\n                console.log(err);\n                console.log(res);\n            });\n        }\n    })\n};\n\n/********** PUT method **********/\n\n/** updateUserById - private **/\nvar updateUserById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n    var userReq = req.body;\n\n    console.log('------------------- PUT - api updateUserById - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'updateUserById';\n    authObj.verb = 'PUT';\n    authObj.params = req.params;\n    console.log('request body: ' + JSON.stringify(userReq));\n    \n    var content_type = req.get('content-type');    \n    if (content_type.indexOf(\"application/json\") === -1)   {\n        jsonObj.success = false;\n        jsonObj.error = 'Content Type must be application/json';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n        return;\n    }\n\n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else    {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                userProvider.updateById(authObj.params.id, userReq, function(err, userRes){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        if (userRes) {\n                            jsonObj.success = true;\n                            jsonObj.user = userRes;\n                            res.send(jsonObj);\n                            console.log('User updated');\n                            console.log('User: ' + JSON.stringify(userRes));\n                        }\n                        else {\n                            jsonObj.success = false;\n                            jsonObj.error = 'No user found';\n                            res.send(jsonObj);\n                            console.log(jsonObj.error);\n                        }\n                    }\n                })\n            }\n        })\n    }\n};\n\n/** activateUserById - public **/\nvar activateUserById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- PUT - api activateUserById - public --------------------- ');\n\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'activateUserById';\n    authObj.verb = 'PUT';\n    authObj.params = req.params;\n    \n    userProvider.activate(authObj, function(err, userRes){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            jsonObj.success = true;\n            jsonObj.desc = 'User activated';\n            res.send(jsonObj);\n            console.log('User activated');\n            \n            /** send welcome mail **/  \n            mail.welcome(userRes, authObj.lang, function(err, res){\n                console.log(err);\n                console.log(res);\n            });\n        }\n    })  \n    \n};\n\n/** resetUserPassword - public **/\nvar resetUserPassword = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- PUT - api resetUserPassword - public --------------------- ');\n\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'resetUserPassword';\n    authObj.verb = 'PUT';\n    authObj.params = req.params;\n    \n    userProvider.resetPassword(authObj, function(err, userRes, pwd){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            jsonObj.success = true;\n            jsonObj.desc = 'Password reset';\n            res.send(jsonObj);\n            console.log('Password reset');\n            \n            /** send resend password mail **/ \n            mail.resend(userRes, authObj.lang, pwd, function(err, res){\n                console.log(err);\n                console.log(res);\n            });\n        }\n    })\n   \n    \n};\n\n/********** DELETE method **********/\n\n/** deleteUsers - private **/\nvar deleteUsers = function(req, res) {\n\n   res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- DELETE - api deleteUsers - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'deleteUsers';\n    authObj.verb = 'DELETE';\n\n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else    {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                userProvider.deleteAll(function(err){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        jsonObj.success = true;\n                        jsonObj.desc = 'All Users deleted';\n                        res.send(jsonObj);\n                        console.log('All Users deleted');\n                    }\n                })\n            }\n        })\n    }\n};\n\n/** deleteUserById - private **/\nvar deleteUserById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- DELETE - api deleteUserById - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    authObj.lang = req.headers.lang;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'deleteUserById';\n    authObj.verb = 'DELETE';\n    authObj.params = req.params;\n    \n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                userProvider.deleteById(authObj.params.id, function(err){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        jsonObj.success = true;\n                        jsonObj.desc = 'User deleted';\n                        res.send(jsonObj);\n                        console.log('User deleted');\n                    }\n                })\n            }\n        })\n    }\n};\n\n\n/*************************************** TYPE API ***************************************/\n\n/********** GET method **********/\n\n/** findTypes - public **/\nvar findTypes = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findTypes - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findTypes';\n    authObj.verb = 'GET';\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    typeProvider.findAll(function(err, types){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (types.length != 0) {\n                res.send(JSON.stringify(types));\n                console.log('Types: ' + JSON.stringify(types));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No types found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })    \n};\n\n/** findTypeById - public **/\nvar findTypeById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findTypeById - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findTypeById';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    typeProvider.findById(authObj.params.id, function(err, type){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (type.length != 0) {\n                res.send(JSON.stringify(type));\n                console.log('type: ' + JSON.stringify(type));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No type found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })\n};\n\n\n/*************************************** REPORT API ***************************************/\n\n/********** GET method **********/\n\n/** findReports - public **/\nvar findReports = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findReports - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findReports';\n    authObj.verb = 'GET';\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    reportProvider.findAll(function(err, reports){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (reports.length != 0) {\n                res.send(JSON.stringify(reports));\n                console.log('Reports: ' + JSON.stringify(reports));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No reports found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })    \n};\n\n/** findReportById - public **/\nvar findReportById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findReportById - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findReportById';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    reportProvider.findById(authObj.params.id, function(err, report){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (report.length != 0) {\n                res.send(JSON.stringify(report));\n                console.log('Report: ' + JSON.stringify(report));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No report found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })    \n};\n\n/** findReportsByUsername - public **/\nvar findReportsByUsername = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findReportsByUsername - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findReportsByUsername';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    reportProvider.findByUsername(authObj.params.username, function(err, reports){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (reports.length != 0) {\n                res.send(JSON.stringify(reports));\n                console.log('Reports: ' + JSON.stringify(reports));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No reports found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })    \n};\n\n/** findReportsByGeo - public **/\nvar findReportsByGeo = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findReportsByGeo - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findReportsByGeo';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    reportProvider.findByGeo(authObj.params, function(err, reports){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (reports.length != 0) {\n                res.send(JSON.stringify(reports));\n                console.log('Reports: ' + JSON.stringify(reports));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No reports found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })    \n};\n\n/** findReportsByText - public **/\nvar findReportsByText = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findReportsByText - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findReportsByText';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    reportProvider.findByText(authObj.params, function(err, reports){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (reports.length != 0) {\n                res.send(JSON.stringify(reports));\n                console.log('Reports: ' + JSON.stringify(reports));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No reports found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })    \n};\n\n/** findReportsByParams - public **/\nvar findReportsByParams = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- GET - api findReportsByParams - public --------------------- ');\n\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'findReportsByParams';\n    authObj.verb = 'GET';\n    authObj.params = req.params;\n    console.log('authObj: ' + JSON.stringify(authObj));\n\n    reportProvider.findByParams(authObj.params, function(err, reports){\n        if (err) {\n            jsonObj.success = false;\n            jsonObj.error = err;\n            res.send(jsonObj);\n            console.log(jsonObj.error);\n        } else {\n            if (reports.length != 0) {\n                res.send(JSON.stringify(reports));\n                console.log('Reports: ' + JSON.stringify(reports));\n            }\n            else {\n                jsonObj.success = false;\n                jsonObj.error = 'No reports found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n        }\n    })    \n};\n\n/********** POST method **********/\n\n/** saveReport - private **/\nvar saveReport = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n    var reportReq = req.body;\n\n    console.log('------------------- POST - api saveReport - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'saveReport';\n    authObj.verb = 'POST';    \n    console.log('request body: ' + JSON.stringify(reportReq));    \n\n    var content_type = req.get('content-type');    \n    if (content_type.indexOf(\"application/json\") === -1)   {\n        jsonObj.success = false;\n        jsonObj.error = 'Content Type must be application/json';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n        return;\n    }\n    \n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else    {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                reportProvider.save(reportReq, authObj.ipAddress, function(err, reportRes){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        jsonObj.success = true;\n                        jsonObj.report    = reportRes;\n                        res.send(jsonObj);\n                        console.log('Report Saved');\n                        console.log('Report: ' + JSON.stringify(reportRes));\n                    }\n                })\n            \n            }\n        })\n    }            \n};\n\n/********** PUT method **********/\n\n/** updateReportById - private **/\nvar updateReportById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n    var reportReq = req.body;\n\n    console.log('------------------- PUT - api updateReportById - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'updateReportById';\n    authObj.verb = 'PUT';\n    authObj.params = req.params;\n    console.log('request body: ' + JSON.stringify(reportReq));\n    \n    var content_type = req.get('content-type');    \n    if (content_type.indexOf(\"application/json\") === -1)   {\n        jsonObj.success = false;\n        jsonObj.error = 'Content Type must be application/json';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n        return;\n    }\n\n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else    {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                reportProvider.updateById(authObj.params.id, reportReq, function(err, reportRes){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        if (reportRes) {\n                            jsonObj.success = true;\n                            jsonObj.report = reportRes;\n                            res.send(jsonObj);\n                            console.log('Report updated');\n                            console.log('Report: ' + JSON.stringify(reportRes));\n                        }\n                        else {\n                            jsonObj.success = false;\n                            jsonObj.error = 'No report found';\n                            res.send(jsonObj);\n                            console.log(jsonObj.error);\n                        }\n                    }\n                })\n            }\n        })\n    }\n};\n\n/********** DELETE method **********/\n\n/** deleteReportById - private **/\nvar deleteReportById = function(req, res) {\n\n    res.set('Content-Type', 'application/json');\n\n    var jsonObj = { };\n    var authObj = { };\n\n    console.log('------------------- DELETE - api deleteReportById - private --------------------- ');\n\n    authObj.authKey = req.headers.authkey;\n    authObj.username = req.headers.username;\n    \n    authObj.isAuth = false;\n    authObj.ipAddress = utils.getClientIp(req);\n    authObj.api = 'deleteReportById';\n    authObj.verb = 'DELETE';\n    authObj.params = req.params;\n    \n    if ((typeof req.headers.authkey === 'undefined') || (typeof req.headers.username === 'undefined'))  {\n        jsonObj.success = false;\n        jsonObj.error = 'auth token required';\n        res.send(jsonObj);\n        console.log(jsonObj.error);\n        console.log('authObj: ' + JSON.stringify(authObj));\n    }\n    else {\n        userProvider.checkAuthKey(authObj, function(err, user){\n            if (err) {\n                authObj.isAuth = false;\n                console.log('authObj: ' + JSON.stringify(authObj));\n                \n                jsonObj.success = false;\n                jsonObj.error = 'AuthKey not found';\n                res.send(jsonObj);\n                console.log(jsonObj.error);\n            }\n            else    {\n                authObj.isAuth = true;\n                console.log('authObj: ' + JSON.stringify(authObj));\n\n                reportProvider.deleteById(authObj.params.id, function(err){\n                    if (err) {\n                        jsonObj.success = false;\n                        jsonObj.error = err;\n                        res.send(jsonObj);\n                        console.log(jsonObj.error);\n                    } else {\n                        jsonObj.success = true;\n                        jsonObj.desc = 'Report deleted';\n                        res.send(jsonObj);\n                        console.log('Report deleted');\n                    }\n                })\n            }\n        })\n    }\n};\n\n/******************************************************************************************/\n\n/** exports **/\nexports.findUsers = findUsers;\nexports.findUserById = findUserById;\nexports.findUserByUsername = findUserByUsername;\nexports.login = login;\nexports.saveUser = saveUser;\nexports.activateUserById = activateUserById;\nexports.resetUserPassword = resetUserPassword;\nexports.updateUserById = updateUserById;\nexports.deleteUsers = deleteUsers;\nexports.deleteUserById = deleteUserById;\n\nexports.findTypes = findTypes;\nexports.findTypeById = findTypeById;\n\nexports.findReports = findReports;\nexports.findReportById = findReportById;\nexports.findReportsByUsername = findReportsByUsername;\nexports.findReportsByGeo = findReportsByGeo;\nexports.findReportsByText = findReportsByText;\nexports.findReportsByParams = findReportsByParams;\nexports.saveReport = saveReport;\nexports.updateReportById = updateReportById;\nexports.deleteReportById = deleteReportById;"]],"start1":0,"start2":0,"length1":0,"length2":38651}]],"length":38651}
