{"ts":1380119294801,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var bcrypt = require('bcrypt');\nvar salt = bcrypt.genSaltSync(10);\nvar mongoose = require('mongoose');\nvar textSearch = require('mongoose-text-search');\nvar config = require('../config/config');\nvar utils = require(\"../config/utils\");\nvar uuid = require('node-uuid');\n\nvar db = mongoose.createConnection('mongodb://' + config.mongo.user + ':' + config.mongo.password + '@' + config.mongo.host + ':' + config.mongo.port + '/' + config.mongo.db);\n\n\n/** Model **/\n\n/** user model **/\nvar userSchema = mongoose.Schema({\n    first_name              :   String,\n    last_name               :   String,\n    username                :   { type: String, required: true, unique: true },\n    password                :   { type: String, required: true },\n    email                   :   { type: String, unique: true },\n    registration_date       :   { type: Date, default: Date.now },\n    auth                    :   {\n                                    authkey         : String,\n                                    ipaddress       : String,\n                                    login_date      : Date,\n                                    activate_date   : Date\n                                },\n    verified                :   { type: Boolean, default: false }                   \n});\n\n/** report type model **/\nvar typeSchema = mongoose.Schema({\n    value               : Number,  \n    description_en      : String,\n    description_it      : String,\n    description_es      : String,\n    description_fr      : String,\n    description_de      : String,\n    sort                : Number\n});\n\n/** report model **/\nvar reportSchema = mongoose.Schema({\n    username_id         :  \t{ type: mongoose.Schema.Types.ObjectId, required: true, ref:'User'},\n    username            :   { type: String, ref:'User'},\n    report_date\t\t\t:  \t{ type: Date, required: true, default: Date.now},\n    type_id  \t        :\t{ type: mongoose.Schema.Types.ObjectId, required: true, ref:'Type' },\n\t\n\tdescription\t\t\t:\tString,\n\tnote\t\t\t\t:\tString,\n    keywords            :   [String],\n    contact_email       :   String,\n\twebsite\t\t\t\t:\tString,\t\n\t\n\tformatted_address\t:  \tString, \n\tcountry\t\t\t\t:  \tString, \n\tcountry_short\t\t:  \tString,\n\tregion\t\t\t\t:  \tString,\n\tprovince\t\t\t:  \tString,\n\tpostal_code\t\t\t:  \tString,\n    lng    \t\t        :   Number,\n    lat\t\t\t        :   Number,\n\tloc                 :   {\n                                type: { \n                                    type: String \n                                }, \n                                coordinates: []\n                            }\n});\n\nreportSchema.plugin(textSearch);\n\nreportSchema.index({ loc: '2dsphere' });\nreportSchema.index({ note: 'text' });\n\nvar User = db.model('User', userSchema);\nvar Type = db.model('Type', typeSchema);\nvar Report = db.model('Report', reportSchema);\n\n/** Provider **/\n\n/** user provider **/\nUserProvider = function(){};\n\n/** Find all users **/\nUserProvider.prototype.findAll = function(callback) {\n    User.find({}, {password:0}, function (err, users) {\n        if (err)    callback(err.message, null)\n        else {\n            if (users != null)  callback(null, users);\n            else                callback('User not found', null);\n        }\n    });\n};\n\n/** Find user by ID **/\nUserProvider.prototype.findById = function(id, callback) {\n    User.findById(id, {password:0}, function (err, user) {\n        if (err)    callback(err.message, null)\n         else {\n            if (user != null)   callback( null, user.toObject() );\n            else                callback( 'User not found', null);\n        }\n    });\n};\n\n/** Find user by username **/\nUserProvider.prototype.findByUsername = function(username, callback) {\n    User.findOne({'username': username}, {password:0}, function (err, user) {\n        if (err)    callback(err.message, null)\n         else {\n            if (user != null)   callback( null, user.toObject() );\n            else                callback( 'User not found', null);\n        }\n    });\n};\n\n/** Login with username and password **/\nUserProvider.prototype.login = function(json, ipAddress, callback) {\n    User.findOne({ $and: [ {'verified':true}, {'username':json.username} ] }, function (err, user) {\n        \n        if (err)    callback(err.message, null)\n        else {\n            if (user != null) {\n                if (bcrypt.compareSync(json.password, user.password)) {\n\n                    user.auth.authkey = uuid.v1();\n                    user.auth.ipaddress = ipAddress;\n                    user.auth.login_date = new Date();\n\n                    user.save(function (err2, user) {\n                        if (err2)   callback(err2.message, null);\n                        else {\n                            User.findOne({username: user.username}, {password:0}, function (err3, userNoPwd) {\n                                if (err3)   callback(err3.message, null)\n                                else        callback(null, userNoPwd);\n                            });\n                        }\n                    });\n\n                }\n                else    callback('Wrong Password', null);\n            }\n            else    callback('User inactive or not found', null);\n        }\n    });\n};\n\n/** Create a new user by json data **/\nUserProvider.prototype.save = function(json, ipAddress, callback) {\n    var user = new User();\n    if (!(typeof json.first_name === 'undefined') )     {\n        user.first_name = json.first_name;\n    }\n    if (!(typeof json.last_name === 'undefined') )      {\n        user.last_name = json.last_name;\n    }\n    if (!(typeof json.username === 'undefined') )       {\n        user.username = json.username;\n    }\n    if (!(typeof json.password === 'undefined') )       {\n        user.password = bcrypt.hashSync(json.password, salt);\n    }\n    if (!(typeof json.email === 'undefined') )          {\n        user.email = json.email;\n    }    \n    \n    user.auth.authkey = uuid.v1();\n    user.auth.ipaddress = ipAddress;\n\n    user.save(function (err, user) {\n        if (err) callback(err.message, null)\n        else {\n            User.findOne({username: user.username}, {password:0}, function (err2, userRes) {\n                if (err2)    callback(err2.message, null)\n                else {\n                    if (userRes != null)    callback(null, userRes);\n                    else                    callback('User not found', null);\n                }\n            });\n        }\n    });\n};\n\n/** Update user by json data **/\nUserProvider.prototype.updateById = function(id, json, callback) {\n    User.findById(id, function (err, user) {\n        if (err) callback(err.message, null)\n        else {\n            if (user != null) {\n\n                if (!(typeof json.first_name === 'undefined') )     {\n                    user.first_name = json.first_name;\n                }\n                if (!(typeof json.last_name === 'undefined') )      {\n                    user.last_name = json.last_name;\n                }\n                if (!(typeof json.password === 'undefined') )       {\n                    user.password = bcrypt.hashSync(json.password, salt);\n                }\n                if (!(typeof json.email === 'undefined') )          {\n                    user.email = json.email;\n                }    \n                \n                user.save(function (err2, user) {\n                    if (err2) callback(err2.message, null)\n                    else {\n                        User.findOne({username: user.username}, {password:0}, function (err3, userRes) {\n                            if (err3)    callback(err3.message, null)\n                            else {\n                                if (userRes != null)    callback(null, userRes);\n                                else                    callback('User not found', null);\n                            }\n                        });\n                    }\n                });\n            }\n            else callback(null, null);\n            }\n    });\n};\n\n/** Delete All users **/\nUserProvider.prototype.deleteAll = function(callback) {\n    User.remove(function (err) {\n        if (err) callback(err.message)\n        else callback(null);\n    });\n};\n\n/** Delete user by id **/\nUserProvider.prototype.deleteById = function(id, callback) {\n    User.findById(id, {password:0}, function (err, user) {\n        if (err) callback(err.message, null)\n        else {\n            if (user != null) {\n                user.remove(function (err2) {\n                        if (err2) callback(err2.message)\n                        else callback(null);\n                    });\n            }\n            else callback(null);\n            }\n    });\n};\n\n/** Check authKey by username **/\nUserProvider.prototype.checkAuthKey = function(json, callback) {\n    User.findOne( {$and: [ {'auth.authkey': json.authKey}, {'username':json.username} ] } , {password:0}, function (err, user) {\n        if (err)    callback(err.message, null)\n         else {\n            if (user != null)   callback( null, user.toObject() );\n            else                callback( 'Invalid Token', null);\n        }\n    });\n};\n\n/** Activate user by id **/\nUserProvider.prototype.activate = function(json, callback) {\n    User.findOne( {$and: [ {'auth.authkey': json.params.key}, {'_id':json.params.id} ] } , {password:0}, function (err, user) {\n        if (err) callback(err.message, null)\n        else {\n            if (user != null) {                \n                \n                user.verified = true;\n                user.auth.authkey = uuid.v1();\n                user.auth.ipaddress = json.ipAddress;\n                user.auth.activate_date = new Date();\n                \n                user.save(function (err2, user) {\n                        if (err2)   callback(err2.message, null)\n                        else        callback(null, user);\n                });\n            }\n            else callback('user or apikey not found', null);\n        }\n    });\n};\n\n/** Reset password user by email **/\nUserProvider.prototype.resetPassword = function(json, callback) {\n    User.findOne({email: json.params.email}, function (err, user) {\n        if (err) callback(err.message, null, null)\n        else {\n            if (user != null) {                \n                \n                var pwd = uuid.v1().substring(0,8);\n                user.password = bcrypt.hashSync(pwd, salt);\n                \n                user.save(function (err2, user) {\n                        if (err2)   callback(err2.message, null, null)\n                        else        callback(null, user, pwd);\n                });\n            }\n            else callback('email not found', null, null);\n        }\n    });\n};\n\n/** type provider **/\nTypeProvider = function(){};\n\n/** Find all types **/\nTypeProvider.prototype.findAll = function(callback) {\n    Type.find({})\n        .sort({sort: 'asc'})\n        .exec(function (err, types) {\n            if (err)    callback(err.message, null)\n            else {\n                if (types != null)  callback(null, types);\n                else                callback('Types not found', null);\n            }\n        });\n};\n\n/** Find type by id **/\nTypeProvider.prototype.findById = function(id, callback) {\n    Type.findById(id, function (err, type) {\n        if (err)    callback(err.message, null)\n        else {\n            if (type != null)   callback(null, type);\n            else                callback('Type not found', null);\n        }\n    });\n};\n\n\n/** report provider **/\nReportProvider = function(){};\n\n/** Find all reports **/\nReportProvider.prototype.findAll = function(callback) {\n    Report.find({})\n        .populate('type_id')\n        .sort({sort: 'asc'})\n        .exec(function (err, reports) {\n            if (err)    callback(err.message, null)\n            else {\n                if (reports != null)    callback(null, reports);\n                else                    callback('Reports not found', null);\n            }\n        });\n};\n\n/** Find report by id **/\nReportProvider.prototype.findById = function(id, callback) {\n    Report.findById(id)\n        .populate('type_id')\n        .exec(function (err, report) {    \n            if (err)    callback(err.message, null)\n            else {\n                if (report != null)    callback(null, report);\n                else                    callback('Report not found', null);\n            }\n        });\n};\n\n/** Find report by username **/\nReportProvider.prototype.findByUsername = function(username, callback) {\n    Report.find({'username': username})\n        .populate('type_id')\n        .sort({sort: 'asc'})\n        .exec(function (err, reports) {\n            if (err)    callback(err.message, null)\n            else {\n                if (reports != null) callback(null, reports);\n                else                 callback('Reports not found', null);\n            }\n        });\n};\n\n/** Find report by geo (spatial query) **/\nReportProvider.prototype.findByGeo = function(params, callback) {\n    \n    var coords = { type : 'Point', coordinates : [params.lng, params.lat] };\n    var distance = params.km * 1000;\n    \n    Report.find({ loc: { $near : coords, $maxDistance : distance }})\n        .populate('type_id')\n        .sort({sort: 'asc'})\n        .exec(function (err, reports) {\n            if (err)    callback(err.message, null)\n            else {\n                if (reports != null) callback(null, reports);\n                else                 callback('Reports not found', null);\n            }\n        });\n};\n\n/** Find report by text (text query) **/\nReportProvider.prototype.findByText = function(params, callback) {\n    \n    var text = params.text;    \n    Report.find({ note: { $regex: text, $options: 'i' } })\n        .populate('type_id')\n        .sort({sort: 'asc'})\n        .exec(function (err, reports) {\n            if (err)    callback(err.message, null)\n            else {\n                if (reports != null) callback(null, reports);\n                else                 callback('Reports not found', null);\n            }\n        });    \n    /*\n    Report.textSearch(text, function (err, reports) {\n        if (err)    callback(err.message, null)\n        else {\n            if (reports != null) callback(null, reports);\n            else                 callback('Reports not found', null);\n        }\n    });\n    */\n};\n\n/** Find report by all params (spatial query + text + type id) **/\nReportProvider.prototype.findByParams = function(params, callback) {\n    \n    var coords = { type : 'Point', coordinates : [params.lng, params.lat] };\n    var distance = params.km * 1000;\n    \n    var text = params.text;   \n    var type_id = params.id;  \n    \n    var query = {};\n    \n    if (distance != 0) {\n        query = { loc:  { $near : coords, $maxDistance : distance }};\n    }\n    if ((text != 'null') || (type_id != 0)) {\n        query[\"$and\"]=[];    \n    }\n    if (text != 'null') {\n        query[\"$and\"].push({ note: { $regex: text, $options: 'i' }});\n    }    \n    if (type_id != 0) {\n        query[\"$and\"].push({\"type_id\" : type_id});\n    }\n    \n    Report\n        .find(query)\n        .populate('type_id')\n        .sort({sort: 'asc'})\n        .exec(function (err, reports) {\n            if (err)    callback(err.message, null)\n            else {\n                if (reports != null) callback(null, reports);\n                else                 callback('Reports not found', null);\n            }\n        });\n};\n\n/** Create a new report by json data **/\nReportProvider.prototype.save = function(json, ipAddress, callback) {\n    \n    json.keywords = [];\n    json.keywords = utils.extractKeywords(json.note);\n    //json.keywords.push(utils.extractKeywords(json.note));   \n    \n    var report = new Report(json);  \n    \n    report.save(function (err, reportRes) {\n        if (err)     callback(err.message, null)\n        else \t\t{\n            callback(null, reportRes);\n        }\n    });    \n    \n};\n\n/** Update report by json data **/\nReportProvider.prototype.updateById = function(id, json, callback) {\n    Report.findById(id, function (err, report) {\n        if (err) callback(err.message, null)\n        else {\n            if (report != null) {\n    \n                report.type_id = json.type_id;\n                report.formatted_address = json.formatted_address;\n                report.country = json.country;\n                report.country_short = json.country_short;\n                report.region = json.region;\n                report.province = json.province;\n                report.postal_code = json.postal_code;\n                report.lng = json.lng;\n                report.lat = json.lat;\n                report.description = json.description;\n                report.note = json.note;\n                \n                report.keywords.splice(0, report.keywords.length);\n                report.keywords = utils.extractKeywords(json.note);  \n                \n                report.contact_email = json.contact_email;\n                report.website = json.website;                \n                report.loc.coordinates.splice(0, 2);\n                report.loc.coordinates.push(json.lng, json.lat);\n                \n                report.save(function (err2, report) {\n                    if (err2) callback(err2.message, null)\n                    else {\n                        Report.findById(report._id, function (err3, reportRes) {\n                            if (err3)    callback(err3.message, null)\n                            else {\n                                if (reportRes != null)    callback(null, reportRes);\n                                else                    callback('Report not found', null);\n                            }\n                        });\n                    }\n                });\n            }\n            else callback(null, null);\n            }\n    });\n};\n\n/** Delete report by id **/\nReportProvider.prototype.deleteById = function(id, callback) {\n    Report.findById(id, function (err, report) {\n        if (err) callback(err.message, null)\n        else {\n            if (report != null) {\n                report.remove(function (err2) {\n                        if (err2) callback(err2.message)\n                        else callback(null);\n                    });\n            }\n            else callback(null);\n            }\n    });\n};\n\nexports.UserProvider = UserProvider;\nexports.TypeProvider = TypeProvider;\nexports.ReportProvider = ReportProvider;"]],"start1":0,"start2":0,"length1":0,"length2":18363}]],"length":18363}
{"contributors":[],"silentsave":false,"ts":1380120562992,"patch":[[{"diffs":[[0,"-uuid');"],[1,"\nvar moment = require('moment'); "],[0,"\n\nvar db"]],"start1":259,"start2":259,"length1":16,"length2":49},{"diffs":[[0,"                "],[1,"//"],[0,"user.auth.login_"]],"start1":4505,"start2":4505,"length1":32,"length2":34},{"diffs":[[0," Date();"],[1,"\n                    user.auth.login_date = moment.utc();"],[0,"\n\n      "]],"start1":4549,"start2":4549,"length1":16,"length2":73}]],"length":18455,"saved":false}
{"ts":1380120750431,"patch":[[{"diffs":[[0,"r model **/\n"],[1,"//registration_date       :   { type: Date, default: Date.now },\n"],[0,"var userSche"]],"start1":502,"start2":502,"length1":24,"length2":89},{"diffs":[[0,"e, default: "],[-1,"Date.now"],[1,"moment.utc()"],[0," },\n    auth"]],"start1":947,"start2":947,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"//"],[0,"user.auth.activa"]],"start1":9719,"start2":9719,"length1":32,"length2":34},{"diffs":[[0,"e = new Date();\n"],[1,"                user.auth.activate_date = moment.utc();\n"],[0,"                "]],"start1":9759,"start2":9759,"length1":32,"length2":88}]],"length":18582,"saved":false}
{"ts":1380120786343,"patch":[[{"diffs":[[0,"t model **/\n"],[1,"//report_date\t\t\t:  \t{ type: Date, required: true, default: Date.now},\n"],[0,"var reportSc"]],"start1":1691,"start2":1691,"length1":24,"length2":94},{"diffs":[[0,"efault: "],[-1,"Date.now"],[1,"moment.utc()"],[0,"},\n    t"]],"start1":2017,"start2":2017,"length1":24,"length2":28}]],"length":18656,"saved":false}
{"ts":1380121323412,"patch":[[{"diffs":[[0,"**/\n"],[-1,"//registration_date       :   { type: Date, default: Date.now },\n"],[0,"var "]],"start1":510,"start2":510,"length1":73,"length2":8}]],"length":18591,"saved":false}
{"ts":1380121326570,"patch":[[{"diffs":[[0,"**/\n"],[-1,"//report_date\t\t\t:  \t{ type: Date, required: true, default: Date.now},\n"],[0,"var "]],"start1":1634,"start2":1634,"length1":78,"length2":8}]],"length":18521,"saved":false}
{"ts":1380121354344,"patch":[[{"diffs":[[0,"ss;\n"],[-1,"                    //user.auth.login_date = new Date();\n"],[0,"    "]],"start1":4505,"start2":4505,"length1":65,"length2":8},{"diffs":[[0,"ss;\n"],[-1,"                //user.auth.activate_date = new Date();\n"],[0,"    "]],"start1":9597,"start2":9597,"length1":64,"length2":8}]],"length":18408,"saved":false}
{"ts":1380199714726,"patch":[[{"diffs":[[0,"f (user != null)"],[1,"   {\n                var today = moment.utc();\n                var diff = today.diff(user.auth.login_date, 'hour');\n             "],[0,"   callback( nul"]],"start1":8978,"start2":8978,"length1":32,"length2":161},{"diffs":[[0,"r.toObject() );\n"],[1,"            }\n"],[0,"            else"]],"start1":9145,"start2":9145,"length1":32,"length2":46}]],"length":18551,"saved":false}
{"ts":1380200114071,"patch":[[{"diffs":[[0,"hour');\n"],[1,"                if (diff > 1)\n                    callback( 'Last login '++' hours ago - relogin required' , null);\n                else\n    "],[0,"        "]],"start1":9102,"start2":9102,"length1":16,"length2":157},{"diffs":[[0,"    else    "],[-1,"            "],[0,"callback( 'I"]],"start1":9324,"start2":9324,"length1":36,"length2":24}]],"length":18680,"saved":false}
{"ts":1380200131882,"patch":[[{"diffs":[[0,"login '+"],[1,"diff"],[0,"+' hours"]],"start1":9176,"start2":9176,"length1":16,"length2":20}]],"length":18684,"saved":false}
{"ts":1380200305085,"patch":[[{"diffs":[[0,"       callback("],[1," 'Last login '+diff+' hours ago - relogin required' , null);\n                    //callback("],[0," null, user.toOb"]],"start1":9264,"start2":9264,"length1":32,"length2":124}]],"length":18776,"saved":false}
{"ts":1380201064407,"patch":[[{"diffs":[[0,"(diff > "],[-1,"1"],[1,"24"],[0,")\n      "]],"start1":9129,"start2":9129,"length1":17,"length2":18},{"diffs":[[0,"ff+' hours ago -"],[1," session expired -"],[0," relogin require"]],"start1":9187,"start2":9187,"length1":32,"length2":50},{"diffs":[[0,"ack("],[-1," 'Last login '+diff+' hours ago - relogin required' , null);\n                    //callback("],[0," nul"]],"start1":9295,"start2":9295,"length1":100,"length2":8}]],"length":18703,"saved":false}
