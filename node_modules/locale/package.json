{
  "author": {
    "name": "Jed Schmidt",
    "email": "tr@nslator.jp",
    "url": "http://jed.is"
  },
  "name": "locale",
  "description": "Browser locale negotiation for node.js",
  "version": "0.0.7",
  "homepage": "https://github.com/jed/locale",
  "repository": {
    "type": "git",
    "url": "git://github.com/jed/locale.git"
  },
  "main": "./lib",
  "scripts": {
    "test": "coffee -o lib/ -c src/ && node ./lib/test.js",
    "prepublish": "coffee -o lib/ -c src/"
  },
  "engines": {
    "node": "~0.6.x"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "~1.2.0",
    "express": "~2.5.6"
  },
  "readme": "locale\n======\n\n[![Build Status](https://secure.travis-ci.org/jed/locale.png)](http://travis-ci.org/jed/locale)\n\nlocale is a [node.js][node] module for negotiating HTTP locales for incoming browser requests. It can be used as a standalone module for HTTP or as [Express][express]/[Connect][connect] middleware.\n\nExamples\n--------\n\n### For the node.js HTTP module\n```javascript\nvar http = require(\"http\")\n  , locale = require(\"locale\")\n  , supported = new locale.Locales([\"en\", \"en_US\", \"ja\"])\n\nhttp.createServer(function(req, res) {\n  var locales = new locale.Locales(req.headers[\"accept-language\"])\n  res.writeHeader(200, {\"Content-Type\": \"text/plain\"})\n  res.end(\n    \"You asked for: \" + req.headers[\"accept-language\"] + \"\\n\" +\n    \"We support: \" + supported + \"\\n\" +\n    \"Our default is: \" + locale.Locale[\"default\"] + \"\\n\" +\n    \"The best match is: \" + locales.best(supported) + \"\\n\"\n  )\n}).listen(8000)\n```\n\n### For Connect/Express\n```javascript\nvar http = require(\"http\")\n  , express = require(\"express\")\n  , locale = require(\"locale\")\n  , supported = [\"en\", \"en_US\", \"ja\"]\n  , app = express.createServer(locale(supported))\n\napp.get(\"/\", function(req, res) {\n  res.header(\"Content-Type\", \"text/plain\")\n  res.send(\n    \"You asked for: \" + req.headers[\"accept-language\"] + \"\\n\" +\n    \"We support: \" + supported + \"\\n\" +\n    \"Our default is: \" + locale.Locale[\"default\"] + \"\\n\" +\n    \"The best match is: \" + req.locale + \"\\n\"\n  )\n})\n\napp.listen(8000)\n```\n\nInstall\n-------\n\n    $ npm install locale\n\n(Note that although this repo is CoffeeScript, the actual npm library is pre-compiled to pure JavaScript and has no run-time dependencies.)\n\nAPI\n---\n\n### locale(supportedLocales)\n\nThis module exports a function that can be used as Express/Connect middleware. It takes one argument, a list of supported locales, and adds a `locale` property to incoming HTTP requests, reflecting the most appropriate locale determined using the `best` method described below.\n\n### new locale.Locale(languageTag)\n\nThe Locale constructor takes a [language tag][langtag] string consisting of an ISO-639 language abbreviation and optional two-letter ISO-3166 country code, and returns an object with a `language` property containing the former and a `country` property containing the latter.\n\n### locale.Locale[\"default\"]\n\nThe default locale for the environment, as parsed from `process.env.LANG`. This is used as the fallback when the best language is calculated from the intersection of requested and supported locales.\n\n### locales = new locale.Locales(acceptLanguageHeader)\n\nThe Locales constructor takes a string compliant with the [`Accept-Language` HTTP header][header], and returns a list of acceptible locales, optionally sorted in descending order by quality score.\n\n### locales.best([supportedLocales])\n\nThis method takes the target locale and compares it against the optionally provided list of supported locales, and returns the most appropriate locale based on the quality scores of the target locale. If no match exists, the default locale is returned.\n\nCopyright\n---------\n\nCopyright (c) 2012 Jed Schmidt. See LICENSE.txt for details.\n\nSend any questions or comments [here](http://twitter.com/jedschmidt).\n\n[node]: http://nodejs.org\n[express]: http://expressjs.com\n[connect]: http://senchalabs.github.com/connect/\n[langtag]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.10\n[header]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4",
  "_id": "locale@0.0.7",
  "dist": {
    "shasum": "1b9a62a058e6c55f7355c83966d7572f986f6d22"
  },
  "_from": "locale"
}
